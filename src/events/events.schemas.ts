/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/events": {
    /** Retrieves the Events */
    get: operations["events_read_events_get"];
    /** Creates an Event */
    post: operations["events_create_events_post"];
  };
  "/event-types": {
    /** Retrieves the Events */
    get: operations["event_types_read_event_types_get"];
  };
  "/audit-events": {
    /** Retrieves the Audit Events */
    get: operations["audit_events_read_audit_events_get"];
  };
  "/service-consumers/{service_provider_id}/agreement-types/{agreement_type_id}": {
    /** Retrieve metrics for agreement type */
    get: operations["agreement_types_metrics_read_service_consumers__service_provider_id__agreement_types__agreement_type_id__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** AgreementTypeMetricsRead */
    AgreementTypeMetricsRead: {
      /** New Agreement Instances */
      new_agreement_instances: number;
      /** Cancelled Agreement Instances */
      cancelled_agreement_instances: number;
    };
    /**
     * AuditAction
     * @enum {string}
     */
    AuditAction: "CREATE" | "UPDATE" | "DELETE";
    /** AuditEventRead */
    AuditEventRead: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Date
       * Format: date-time
       */
      date: string;
      /** User Id */
      user_id?: string | null;
      action: components["schemas"]["AuditAction"];
      resource: components["schemas"]["AuditResource"];
      /** Payload */
      payload?: Record<string, never> | null;
      /** Service Provider Id */
      service_provider_id?: string | null;
      /** Oauth Client Id */
      oauth_client_id?: string | null;
      /** Organization Id */
      organization_id?: string | null;
      /** Service Provider User Id */
      service_provider_user_id?: string | null;
    };
    /** AuditResource */
    AuditResource: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Type */
      type: string;
      /** Name */
      name?: string | null;
    };
    /** EventCreate */
    EventCreate: {
      type: components["schemas"]["EventType"];
      /**
       * Timestamp
       * Format: date-time
       */
      timestamp: string;
      /** User Id */
      user_id?: string | null;
      /** Organization Id */
      organization_id?: string | null;
      /** Oauth Client Id */
      oauth_client_id?: string | null;
      /** Service Provider Id */
      service_provider_id?: string | null;
      /** Payload */
      payload?: components["schemas"]["EventPayloadId"] | components["schemas"]["EventPayloadRequest"] | components["schemas"]["EventPayloadSignup"] | components["schemas"]["EventPayloadAgreement"] | components["schemas"]["EventPayloadAgreementOrganization"] | components["schemas"]["EventPayloadAgreementAssignment"] | components["schemas"]["EventPayloadPolicy"] | components["schemas"]["EventPayloadPolicyAssignment"] | null;
    };
    /** EventPayloadAgreement */
    EventPayloadAgreement: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Agreement Type Id
       * Format: uuid
       */
      agreement_type_id: string;
    };
    /** EventPayloadAgreementAssignment */
    EventPayloadAgreementAssignment: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Agreement Type Id
       * Format: uuid
       */
      agreement_type_id: string;
      /** Organization Id */
      organization_id?: string | null;
      /** Organization User Id */
      organization_user_id?: string | null;
      /** Organization Unit Id */
      organization_unit_id?: string | null;
      /** Organization Group Id */
      organization_group_id?: string | null;
    };
    /** EventPayloadAgreementOrganization */
    EventPayloadAgreementOrganization: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Agreement Type Id
       * Format: uuid
       */
      agreement_type_id: string;
      /**
       * Organization Id
       * Format: uuid
       */
      organization_id: string;
    };
    /** EventPayloadId */
    EventPayloadId: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /** EventPayloadPolicy */
    EventPayloadPolicy: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Policy Type Id
       * Format: uuid
       */
      policy_type_id: string;
    };
    /** EventPayloadPolicyAssignment */
    EventPayloadPolicyAssignment: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /**
       * Policy Type Id
       * Format: uuid
       */
      policy_type_id: string;
      /** Organization Id */
      organization_id?: string | null;
      /** Organization User Id */
      organization_user_id?: string | null;
    };
    /** EventPayloadRequest */
    EventPayloadRequest: {
      /** Ip Address */
      ip_address: string;
    };
    /** EventPayloadSignup */
    EventPayloadSignup: {
      method: components["schemas"]["SignupMethod"];
    };
    /** EventRead */
    EventRead: {
      type: components["schemas"]["EventType"];
      /**
       * Timestamp
       * Format: date-time
       */
      timestamp: string;
      /** User Id */
      user_id?: string | null;
      /** Organization Id */
      organization_id?: string | null;
      /** Oauth Client Id */
      oauth_client_id?: string | null;
      /** Service Provider Id */
      service_provider_id?: string | null;
      /** Payload */
      payload?: components["schemas"]["EventPayloadId"] | components["schemas"]["EventPayloadRequest"] | components["schemas"]["EventPayloadSignup"] | components["schemas"]["EventPayloadAgreement"] | components["schemas"]["EventPayloadAgreementOrganization"] | components["schemas"]["EventPayloadAgreementAssignment"] | components["schemas"]["EventPayloadPolicy"] | components["schemas"]["EventPayloadPolicyAssignment"] | null;
      /**
       * Id
       * Format: uuid
       */
      id: string;
    };
    /**
     * EventType
     * @enum {string}
     */
    EventType: "LOGIN" | "LOGIN_FAILED" | "LOGOUT" | "ONBOARDING_COMPLETED" | "ONBOARDING_USER_UPDATED" | "ORGANIZATION_CREATED" | "ORGANIZATION_USER_REMOVED" | "SIGNUP_STARTED" | "SIGNUP_COMPLETED" | "PASSWORD_FORGOTTEN" | "PASSWORD_RESET" | "ORGANIZATION_GROUP_CREATED" | "ORGANIZATION_GROUP_REMOVED" | "ORGANIZATION_USER_INVITED" | "ORGANIZATION_USER_ACCEPTED" | "ORGANIZATION_USER_COMPLETED" | "ORGANIZATION_USER_ADDED" | "SERVICE_CONSUMER_CREATED" | "AGREEMENT_ALLOCATED" | "AGREEMENT_ACTIVATED" | "AGREEMENT_CANCELLED" | "AGREEMENT_ASSIGNED" | "POLICY_ASSIGNED" | "POLICY_REMOVED" | "SERVICE_CONSUMER_ACTIVATED" | "SERVICE_CONSUMER_DEACTIVATED" | "PASSWORD_UPDATED" | "USER_LOCKED" | "SSO_CONFIGURED" | "SSO_ENABLED" | "SSO_DISABLED" | "SSO_REMOVED";
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** PaginationSchema[AuditEventRead] */
    PaginationSchema_AuditEventRead_: {
      /** Offset */
      offset: number;
      /** Limit */
      limit: number;
      /** Results */
      results: components["schemas"]["AuditEventRead"][];
      /** Size */
      size: number;
      /** Total */
      total?: number | null;
    };
    /** PaginationSchema[EventRead] */
    PaginationSchema_EventRead_: {
      /** Offset */
      offset: number;
      /** Limit */
      limit: number;
      /** Results */
      results: components["schemas"]["EventRead"][];
      /** Size */
      size: number;
      /** Total */
      total?: number | null;
    };
    /**
     * SignupMethod
     * @enum {string}
     */
    SignupMethod: "google" | "microsoft" | "email";
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Retrieves the Events */
  events_read_events_get: {
    parameters: {
      query?: {
        /** @description Events Offset */
        offset?: number;
        /** @description Max number of Events */
        limit?: number;
        /** @description Type of Event */
        event_type?: components["schemas"]["EventType"] | null;
        /** @description Min Date of Event */
        from_date?: string | null;
        /** @description Max Date of Event */
        until_date?: string | null;
        /** @description ID of the User */
        user_id?: string | null;
        /** @description ID of the Organization */
        organization_id?: string | null;
        /** @description ID of the OAuth Client */
        oauth_client_id?: string | null;
        /** @description ID of the Service Provider */
        service_provider_id?: string | null;
        /** @description Term to search for Events */
        query?: string | null;
        /** @description Attributes used to sort the Events: ['type', 'timestamp'] */
        sort?: string | null;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PaginationSchema_EventRead_"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Creates an Event */
  events_create_events_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["EventCreate"];
      };
    };
    responses: {
      /** @description Successful Response */
      201: {
        content: {
          "application/json": components["schemas"]["EventRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieves the Events */
  event_types_read_event_types_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EventType"][];
        };
      };
    };
  };
  /** Retrieves the Audit Events */
  audit_events_read_audit_events_get: {
    parameters: {
      query?: {
        /** @description ID of the Organization */
        organization_id?: string | null;
        /** @description ID of the Service Provider */
        service_provider_id?: string | null;
        /** @description Min Date of Audit Event */
        from_date?: string | null;
        /** @description Max Date of Audit Event */
        until_date?: string | null;
        /** @description ID of the User */
        user_id?: string | null;
        /** @description ID of the OAuth Client */
        oauth_client_id?: string | null;
        /** @description Audit Events Offset */
        offset?: number;
        /** @description Max number of Audit Events */
        limit?: number;
        /** @description Attributes used to sort the Audit Events: ['event_date', 'event_action'] */
        sort?: string | null;
      };
    };
    responses: {
      /** @description Audit Events Retrieved */
      200: {
        content: {
          "application/json": components["schemas"]["PaginationSchema_AuditEventRead_"];
        };
      };
      /** @description Unauthorized */
      401: {
        content: never;
      };
      /** @description Forbidden */
      403: {
        content: never;
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Retrieve metrics for agreement type */
  agreement_types_metrics_read_service_consumers__service_provider_id__agreement_types__agreement_type_id__get: {
    parameters: {
      query?: {
        /** @description Start Date */
        start_date?: string;
        /** @description End Date */
        end_date?: string;
      };
      path: {
        /** @description ID of the Service Provider */
        service_provider_id: string;
        /** @description ID of the Agreement Type */
        agreement_type_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AgreementTypeMetricsRead"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
