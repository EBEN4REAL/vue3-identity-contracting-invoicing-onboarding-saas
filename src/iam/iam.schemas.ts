/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/load/{dataset_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Load Data
         * @description Loads initial dataset in DEBUG / Dev Environment.
         *     Not usable for (pre-)production
         *     The dataset id corresponds with the datasets in the tests part of the project
         */
        get: operations["load_data_load__dataset_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/unload/e2e": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Unload E2E */
        get: operations["unload_e2e_unload_e2e_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/unload/graphql": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Unload Graphql */
        get: operations["unload_graphql_unload_graphql_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/testqueue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Test Queue
         * @description Test queueing
         */
        get: operations["test_queue_testqueue_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/test/exception": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Test Exception */
        get: operations["test_exception_test_exception_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/access-evaluations/{access_evaluation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the Access Evaluation */
        get: operations["access_evaluation_read_access_evaluations__access_evaluation_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service_providers/{service_provider_id}/access-evaluations/{access_evaluation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the Service Provider Access Evaluation */
        get: operations["service_provider_access_evaluation_read_service_providers__service_provider_id__access_evaluations__access_evaluation_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/access-evaluations/{access_evaluation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the Organization Access Evaluation */
        get: operations["organization_access_evaluation_read_organizations__organization_id__access_evaluations__access_evaluation_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/access-evaluations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieve the Access Evaluations */
        get: operations["access_evaluations_read_access_evaluations_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login-attempts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves all Login attempts */
        get: operations["login_attempts_read_login_attempts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/login-attempts/@me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves Login attempts for the authenticated user */
        get: operations["login_attempts_me_read_login_attempts__me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organizations */
        get: operations["organizations_read_organizations_get"];
        put?: never;
        /** Creates an Organization */
        post: operations["organizations_create_organizations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an Organization */
        get: operations["organization_read_organizations__organization_id__get"];
        put?: never;
        post?: never;
        /** Deletes an Organization */
        delete: operations["organizations_delete_organizations__organization_id__delete"];
        options?: never;
        head?: never;
        /** Updates an Organization */
        patch: operations["organizations_patch_organizations__organization_id__patch"];
        trace?: never;
    };
    "/organizations/{organization_id}/service-providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Service Providers for an Organization */
        get: operations["organization_service_providers_read_organizations__organization_id__service_providers_get"];
        put?: never;
        /** Registers the Organization as a Service Provider */
        post: operations["organization_service_providers_create_organizations__organization_id__service_providers_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/service-providers/{service_provider_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves information about a Service Provider that the Organization belongs to */
        get: operations["organization_service_provider_read_organizations__organization_id__service_providers__service_provider_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization Metrics */
        get: operations["organization_metrics_read_organizations__organization_id__metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/metrics/active-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization Metrics - Active Users */
        get: operations["organization_metrics_active_users_read_organizations__organization_id__metrics_active_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/metrics/failed-logins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization Metrics - Failed Logins */
        get: operations["organization_metrics_failed_logins_read_organizations__organization_id__metrics_failed_logins_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/metrics/signups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization Metrics - Signups */
        get: operations["organization_metrics_signups_read_organizations__organization_id__metrics_signups_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Removes the Organization User */
        delete: operations["organization_user_delete_organizations__organization_id__users__user_id__delete"];
        options?: never;
        head?: never;
        /** Updates the Organization User */
        patch: operations["organization_user_edit_organizations__organization_id__users__user_id__patch"];
        trace?: never;
    };
    "/organizations/{organization_id}/users/{user_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates the Organization User Status */
        put: operations["organization_user_status_edit_organizations__organization_id__users__user_id__status_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users/@me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization User */
        get: operations["organization_user_read_me_organizations__organization_id__users__me_get"];
        put?: never;
        /** Create the Organization User */
        post: operations["organization_users_create_me_organizations__organization_id__users__me_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users/{org_user_id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates an Organization user is_active status to enable. */
        put: operations["organization_user_enable_put_organizations__organization_id__users__org_user_id__enable_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users/{org_user_id}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates an Organization user is_active status to disable. */
        put: operations["organization_user_disable_put_organizations__organization_id__users__org_user_id__disable_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Users from an Organization */
        get: operations["organization_users_read_organizations__organization_id__users_get"];
        put?: never;
        /** Create the Organization Users */
        post: operations["create_organization_users_organizations__organization_id__users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users/{user_id}/invitation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create the Invitation Email for an Organization User */
        post: operations["organization_user_invitation_create_organizations__organization_id__users__user_id__invitation_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users/{organization_user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization User */
        get: operations["organization_user_read_organizations__organization_id__users__organization_user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users/{organization_user_id}/login-attempts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization User Login Attempts */
        get: operations["organization_user_login_attempts_read_organizations__organization_id__users__organization_user_id__login_attempts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users/{organization_user_id}/password-reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Reset the Organization User Password */
        post: operations["reset_organization_user_password_organizations__organization_id__users__organization_user_id__password_reset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users/{organization_user_id}/totp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Reset the Organization User TOTP */
        delete: operations["reset_organization_user_totp_organizations__organization_id__users__organization_user_id__totp_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users/imports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Import Organization Users */
        post: operations["import_organization_users_organizations__organization_id__users_imports_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users/imports/{organization_user_import_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Organization Users Import */
        get: operations["import_organization_user_read_organizations__organization_id__users_imports__organization_user_import_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users/{user_id}/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization User Groups */
        get: operations["organization_user_groups_read_organizations__organization_id__users__user_id__groups_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/users/{user_id}/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization User's Organization unit */
        get: operations["organization_user_organization_unit_read_organizations__organization_id__users__user_id__units_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization Groups */
        get: operations["organization_groups_read_organizations__organization_id__groups_get"];
        put?: never;
        /** Creates an Organization Group */
        post: operations["organization_groups_create_organizations__organization_id__groups_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/groups/{organization_group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization Group */
        get: operations["organization_group_read_organizations__organization_id__groups__organization_group_id__get"];
        put?: never;
        post?: never;
        /** Removes the Organization Group */
        delete: operations["organization_group_delete_organizations__organization_id__groups__organization_group_id__delete"];
        options?: never;
        head?: never;
        /** Updates the Organization Group */
        patch: operations["organization_group_edit_organizations__organization_id__groups__organization_group_id__patch"];
        trace?: never;
    };
    "/organizations/{organization_id}/groups/{organization_group_id}/organization_users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adds Organization Users to an Organization Group */
        post: operations["organization_group_organization_users_create_organizations__organization_id__groups__organization_group_id__organization_users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/groups/{organization_group_id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization Users that belong to an Organization Group */
        get: operations["organization_group_users_read_organizations__organization_id__groups__organization_group_id__users_get"];
        put?: never;
        /** Adds Users to an Organization Group */
        post: operations["organization_group_users_create_organizations__organization_id__groups__organization_group_id__users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/groups/{organization_group_id}/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Removes a User from an Organization Group */
        delete: operations["organization_group_user_delete_organizations__organization_id__groups__organization_group_id__users__user_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/units": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization Units for an Organization */
        get: operations["organization_units_read_organizations__organization_id__units_get"];
        put?: never;
        /** Creates an Organization Unit */
        post: operations["organization_units_create_organizations__organization_id__units_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/units/{organization_unit_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves an Organization Unit */
        get: operations["organization_unit_read_organizations__organization_id__units__organization_unit_id__get"];
        put?: never;
        post?: never;
        /** Removes an Organization Unit */
        delete: operations["organization_unit_delete_organizations__organization_id__units__organization_unit_id__delete"];
        options?: never;
        head?: never;
        /** Updates the Organization Unit */
        patch: operations["organization_unit_edit_organizations__organization_id__units__organization_unit_id__patch"];
        trace?: never;
    };
    "/organizations/{organization_id}/units/{organization_unit_id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Adds Users to an Organization Unit */
        post: operations["organization_unit_users_add_organizations__organization_id__units__organization_unit_id__users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/units/{organization_unit_id}/organization_users/{organization_user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Removes a User from an Organization Unit */
        delete: operations["organization_unit_user_delete_organizations__organization_id__units__organization_unit_id__organization_users__organization_user_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/sub-organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Sub-Organizations for an Organization */
        get: operations["sub_organizations_read_organizations__organization_id__sub_organizations_get"];
        put?: never;
        /** Creates a Sub-Organization */
        post: operations["sub_organizations_create_organizations__organization_id__sub_organizations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/sub-organizations/{sub_organization_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Removes a Sub-Organization from an Organization */
        delete: operations["delete_sub_organizations_organizations__organization_id__sub_organizations__sub_organization_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/organizations/{organization_id}/oidc": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the OIDC for an Organization */
        get: operations["oidc_read_organizations__organization_id__oidc_get"];
        put?: never;
        /** Creates an OIDC for an Organization */
        post: operations["oidc_create_organizations__organization_id__oidc_post"];
        /** Removes an OIDC of an Organization */
        delete: operations["oidc_delete_organizations__organization_id__oidc_delete"];
        options?: never;
        head?: never;
        /** Updates an OIDC for an Organization */
        patch: operations["oidc_update_organizations__organization_id__oidc_patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Roles for a Service Provider */
        get: operations["roles_read_service_providers__service_provider_id__roles_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/roles/{role_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Reads Role for a Service Provider */
        get: operations["role_read_service_providers__service_provider_id__roles__role_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resources/{resource_urn}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Requests Access to a Resource */
        get: operations["resource_read_resources__resource_urn__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Service Providers */
        get: operations["service_providers_read_service_providers_get"];
        put?: never;
        /** Creates a Service Provider */
        post: operations["service_providers_create_service_providers_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Service Provider */
        get: operations["service_provider_read_service_providers__service_provider_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update the Service Provider */
        patch: operations["update_service_provider_service_providers__service_provider_id__patch"];
        trace?: never;
    };
    "/service-providers/{service_provider_id}/logo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload a logo for a Service Provider */
        post: operations["upload_service_provider_logo_service_providers__service_provider_id__logo_post"];
        /** Delete logo for a Service Provider */
        delete: operations["delete_service_provider_logo_service_providers__service_provider_id__logo_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/entitlements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Service Provider Entitlements */
        get: operations["get_entitlements_service_providers__service_provider_id__entitlements_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/entitlements/{entitlement_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Service Provider Entitlement */
        get: operations["get_entitlement_service_providers__service_provider_id__entitlements__entitlement_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Service Provider Metrics */
        get: operations["service_provider_metrics_read_service_providers__service_provider_id__metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/metrics/active-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Service Provider Metrics - Active Users */
        get: operations["service_provider_metrics_active_users_read_service_providers__service_provider_id__metrics_active_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/metrics/failed-logins": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Service Provider Metrics - Failed Logins */
        get: operations["service_provider_metrics_failed_logins_read_service_providers__service_provider_id__metrics_failed_logins_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/metrics/signups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Service Provider Metrics - Signups */
        get: operations["service_provider_metrics_signups_read_service_providers__service_provider_id__metrics_signups_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/oauth-clients/{oauth_client_id}/plan-page": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the OAuth Client's Plan Page Data */
        get: operations["oauth_client_plan_page_read_service_providers__service_provider_id__oauth_clients__oauth_client_id__plan_page_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/organization-users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization Users for the Service Provider */
        get: operations["service_provider_organization_users_read_service_providers__service_provider_id__organization_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/organization-users/{service_provider_organization_user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization User of the Service Provider */
        get: operations["service_provider_organization_user_read_service_providers__service_provider_id__organization_users__service_provider_organization_user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organizations associated with a Service Provider */
        get: operations["service_provider_organizations_read_service_providers__service_provider_id__organizations_get"];
        put?: never;
        /** Creates an Organization and adds it to a Service Provider */
        post: operations["service_provider_organization_create_service_providers__service_provider_id__organizations_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/organizations/{organization_id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization Users which are associated with a Service Provider */
        get: operations["service_provider_organization_users_read_service_providers__service_provider_id__organizations__organization_id__users_get"];
        put?: never;
        /** Create Service Provider Organization User */
        post: operations["service_provider_organization_users_create_service_providers__service_provider_id__organizations__organization_id__users_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/organizations/{organization_id}/users/{service_provider_user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization User Details which are associated with a Service Provider */
        get: operations["service_provider_organization_user_detail_read_service_providers__service_provider_id__organizations__organization_id__users__service_provider_user_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/organizations/{organization_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves details about an Organization associated with a Service Provider. */
        get: operations["service_provider_organization_details_read_service_providers__service_provider_id__organizations__organization_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/organizations/{organization_id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Deactivate the Service Provider Organization */
        put: operations["service_provider_organization_deactivate_service_providers__service_provider_id__organizations__organization_id__deactivate_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/organizations/{organization_id}/users/{user_id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update the Status of an Organization User associated with a Service Provider */
        put: operations["service_provider_organization_user_status_update_service_providers__service_provider_id__organizations__organization_id__users__user_id__status_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/organizations/{organization_id}/users/{user_id}/invitation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create the Invitation Email for an Organization User associated with a Service Provider */
        post: operations["service_provider_organization_user_invitation_create_service_providers__service_provider_id__organizations__organization_id__users__user_id__invitation_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/organizations/imports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Import Service Provider Organizations and Users */
        post: operations["import_service_provider_organizations_and_users_service_providers__service_provider_id__organizations_imports_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-providers/{service_provider_id}/organizations/imports/{organization_import_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Service Provider Organization Import */
        get: operations["get_service_provider_organization_import_service_providers__service_provider_id__organizations_imports__organization_import_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-provider-users/@me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the authenticated Service Provider User */
        get: operations["service_provider_user_me_read_service_provider_users__me_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-provider-users/{service_provider_user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Updates the Service Provider User */
        patch: operations["service_provider_user_edit_service_provider_users__service_provider_user_id__patch"];
        trace?: never;
    };
    "/service-provider-users/{service_provider_user_id}/onboarding_completed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves a Service Provider User Onboarding Completed Status */
        get: operations["service_provider_user_onboarding_completed_read_service_provider_users__service_provider_user_id__onboarding_completed_get"];
        /** Updates a Service Provider User Onboarding Completed Status */
        put: operations["service_provider_user_onboarding_completed_edit_service_provider_users__service_provider_user_id__onboarding_completed_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service-provider-users/{service_provider_id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Organization Users which are associated with a Service Provider */
        get: operations["service_provider_organization_users_read_service_provider_users__service_provider_id__users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth-clients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the OAuth Clients */
        get: operations["oauth_clients_read_oauth_clients_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth-clients/{oauth_client_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the OAuth Client */
        get: operations["oauth_client_read_oauth_clients__oauth_client_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings/password-requirements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the password requirements */
        get: operations["password_requirements_read_settings_password_requirements_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Users */
        get: operations["users_read_users_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the authenticated User */
        get: operations["user_me_read_users__me_get"];
        put?: never;
        post?: never;
        /** Removes authenticated User */
        delete: operations["user_me_delete_users__me_delete"];
        options?: never;
        head?: never;
        /** Updates the authenticated User */
        patch: operations["user_me_edit_users__me_patch"];
        trace?: never;
    };
    "/users/@me/access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the User Access */
        get: operations["user_access_read_users__me_access_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the User */
        get: operations["user_read_users__user_id__get"];
        put?: never;
        post?: never;
        /** Removes a User */
        delete: operations["user_delete_users__user_id__delete"];
        options?: never;
        head?: never;
        /** Updates a User */
        patch: operations["user_edit_users__user_id__patch"];
        trace?: never;
    };
    "/users/@me/password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates the Password for the authenticated User */
        put: operations["user_me_password_update_users__me_password_put"];
        /** User Me Password Create */
        post: operations["user_me_password_create_users__me_password_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/password-reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset User Password
         * @description Triggers the Password Reset flow for a User
         */
        post: operations["reset_user_password_users__user_id__password_reset_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Enables an User */
        put: operations["user_enable_users__user_id__enable_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Disables an User */
        put: operations["user_disable_users__user_id__disable_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/magic_link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates the Magic Link Enabled field for the Authenticated User */
        put: operations["user_me_magic_link_enabled_update_users__me_magic_link_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/email-otp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the Email OTP status for the User */
        get: operations["user_me_email_otp_read_users__me_email_otp_get"];
        /** Updates the Email OTP Enabled field for the Authenticated User */
        put: operations["user_me_email_otp_update_enabled_users__me_email_otp_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/mfa_required": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates the MFA Required field for the Authenticated User */
        put: operations["user_me_mfa_required_status_update_users__me_mfa_required_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/mfa_required": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates the MFA Required field for a User */
        put: operations["user_mfa_required_status_update_users__user_id__mfa_required_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/hubspot-visitor-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Call HubSpot API to get a new Visitor Token for the Authenticated User */
        post: operations["user_me_hubspot_visitor_token_users__me_hubspot_visitor_token_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Updates the Email for the authenticated User */
        put: operations["user_me_email_update_users__me_email_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/emails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Fetches the Emails for the authenticated User */
        get: operations["user_me_emails_read_users__me_emails_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/emails/{email_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Removes an unverified Email address for the authenticated User */
        delete: operations["delete_user_email_users__me_emails__email_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/mfa": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the MFA method and options for the authenticated User */
        get: operations["user_me_mfa_read_users__me_mfa_get"];
        /** Updates the MFA method for the authenticated User */
        put: operations["user_me_mfa_update_users__me_mfa_put"];
        post?: never;
        /** Deletes the MFA method for the authenticated User */
        delete: operations["user_me_mfa_delete_users__me_mfa_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Sessions for the authenticated User */
        get: operations["user_me_sessions_read_users__me_sessions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/sessions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Sessions for the User */
        get: operations["user_sessions_read_users__user_id__sessions_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/sessions/{session_token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Removes the Session from the authenticated User */
        delete: operations["user_me_session_delete_users__me_sessions__session_token__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/sessions/{session_token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Removes the Session from the User */
        delete: operations["user_session_delete_users__user_id__sessions__session_token__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/social-accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Social Accounts for the authenticated User */
        get: operations["user_me_social_accounts_read_users__me_social_accounts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/social-accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Retrieves the Social Accounts for the User */
        get: operations["user_social_accounts_read_users__user_id__social_accounts_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/social-accounts/{social_account}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Removes the Social Account from the authenticated User */
        delete: operations["user_me_social_account_delete_users__me_social_accounts__social_account__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/social-accounts/{social_account}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Removes the Social Account from the User */
        delete: operations["user_social_account_delete_users__user_id__social_accounts__social_account__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/totp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the TOTP associated with the authenticated user */
        get: operations["user_me_totp_read_users__me_totp_get"];
        /** Marks the User TOTP as confirmed */
        put: operations["user_me_update_totp_users__me_totp_put"];
        /** Initiates the configuration of TOTP (2FA) for the authenticated user */
        post: operations["user_me_totp_create_users__me_totp_post"];
        /** Removes the TOTP authentication for the authenticated user */
        delete: operations["user_me_totp_delete_users__me_totp_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/totp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Removes the TOTP authentication for a user */
        delete: operations["user_totp_delete_users__user_id__totp_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/@me/webauthn": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the WebAuthn associated with the authenticated user */
        get: operations["user_me_webauthn_read_users__me_webauthn_get"];
        /** Confirms the WebAuthn configuration for the authenticated user */
        put: operations["user_me_webauthn_update_users__me_webauthn_put"];
        /** Initiates the WebAuthn configuration for the authenticated user */
        post: operations["user_me_webauthn_create_users__me_webauthn_post"];
        /** Deletes the WebAuthn associated with the authenticated user */
        delete: operations["user_me_webauthn_delete_users__me_webauthn_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AccessEvaluationBaseRead */
        AccessEvaluationBaseRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            outcome: components["schemas"]["PolicyOutcome"];
            /**
             * Evaluation Date
             * Format: date-time
             */
            evaluation_date: string;
            /** Resource Urn */
            resource_urn?: string | null;
            service_provider?: components["schemas"]["IdNameSchema"] | null;
            oauth_client?: components["schemas"]["IdNameSchema"] | null;
            organization?: components["schemas"]["IdNameSchema"] | null;
            user?: components["schemas"]["UserAccessEvaluationRead"] | null;
        };
        /** AccessEvaluationLineRead */
        AccessEvaluationLineRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            outcome: components["schemas"]["PolicyOutcome"];
            policy?: components["schemas"]["PolicyRead"] | null;
            agreement?: components["schemas"]["AgreementRead"] | null;
        };
        /** AccessEvaluationRead */
        AccessEvaluationRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            outcome: components["schemas"]["PolicyOutcome"];
            /**
             * Evaluation Date
             * Format: date-time
             */
            evaluation_date: string;
            /** Resource Urn */
            resource_urn?: string | null;
            service_provider?: components["schemas"]["IdNameSchema"] | null;
            oauth_client?: components["schemas"]["IdNameSchema"] | null;
            organization?: components["schemas"]["IdNameSchema"] | null;
            user?: components["schemas"]["UserAccessEvaluationRead"] | null;
            /** Lines */
            lines?: components["schemas"]["AccessEvaluationLineRead"][] | null;
        };
        /** AgreementRead */
        AgreementRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            type: components["schemas"]["OptionalIdNameSchema"];
        };
        /** AttributeRead */
        AttributeRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            data_type: components["schemas"]["DataType"];
            /** Value */
            value?: unknown | null;
            /** Restrictions */
            restrictions?: Record<string, never> | null;
        };
        /** AttributeReadWithEditable */
        AttributeReadWithEditable: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            data_type: components["schemas"]["DataType"];
            /** Value */
            value?: unknown | null;
            /** Restrictions */
            restrictions?: Record<string, never> | null;
            /**
             * Editable
             * @default true
             */
            editable: boolean;
        };
        /** Body_import_organization_users_organizations__organization_id__users_imports_post */
        Body_import_organization_users_organizations__organization_id__users_imports_post: {
            /**
             * Import File
             * Format: binary
             */
            import_file: string;
        };
        /** Body_import_service_provider_organizations_and_users_service_providers__service_provider_id__organizations_imports_post */
        Body_import_service_provider_organizations_and_users_service_providers__service_provider_id__organizations_imports_post: {
            /**
             * Import File
             * Format: binary
             */
            import_file: string;
        };
        /** Body_upload_service_provider_logo_service_providers__service_provider_id__logo_post */
        Body_upload_service_provider_logo_service_providers__service_provider_id__logo_post: {
            /**
             * Logo
             * Format: binary
             */
            logo: string;
        };
        /**
         * DataType
         * @enum {string}
         */
        DataType: "uuid" | "string" | "datetime" | "date" | "boolean" | "enum" | "integer";
        /** EntitlementRead */
        EntitlementRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
        };
        /**
         * GroupRole
         * @enum {string}
         */
        GroupRole: "A" | "E" | "V";
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** HubspotVisitorIdentificationToken */
        HubspotVisitorIdentificationToken: {
            /** Token */
            token: string;
            /**
             * Expire Date
             * Format: date-time
             */
            expire_date: string;
        };
        /** IdNameSchema */
        IdNameSchema: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string | null;
        };
        /**
         * Industry
         * @enum {string}
         */
        Industry: "SAAS" | "ESG" | "COMMERCE" | "HEALTHCARE" | "FINANCIAL_SERVICES" | "DIGITAL_PRODUCTS" | "OTHER";
        /**
         * JobRole
         * @enum {string}
         */
        JobRole: "MARKETING" | "SALES" | "DEVELOPMENT" | "PRODUCT" | "CUSTOMER_SUPPORT" | "EXECUTIVE_MANAGEMENT" | "FINANCE" | "OTHER";
        /** LoginAttemptRead */
        LoginAttemptRead: {
            /**
             * Date
             * Format: date-time
             */
            date: string;
            user?: components["schemas"]["IdNameSchema"] | null;
            organization?: components["schemas"]["IdNameSchema"] | null;
            oauth_client?: components["schemas"]["OAuthClientBaseRead"] | null;
            service_provider?: components["schemas"]["IdNameSchema"] | null;
            login_source?: components["schemas"]["LoginSource"] | null;
            login_outcome?: components["schemas"]["LoginOutcome"] | null;
            /** Ip Address */
            ip_address?: string | null;
            login_access?: components["schemas"]["PolicyOutcome"] | null;
        };
        /**
         * LoginOutcome
         * @enum {string}
         */
        LoginOutcome: "S" | "F" | "P" | "M" | "O" | "FM" | "ML" | "SU";
        /**
         * LoginSource
         * @enum {string}
         */
        LoginSource: "E" | "G" | "M" | "S";
        /**
         * MFAMethod
         * @enum {string}
         */
        MFAMethod: "TOTP" | "WEBAUTHN" | "EMAIL_OTP";
        /** MFARead */
        MFARead: {
            method?: components["schemas"]["MFAMethod"] | null;
            /** Options */
            options: components["schemas"]["MFAMethod"][];
        };
        /** MFAUpdate */
        MFAUpdate: {
            method: components["schemas"]["MFAMethod"];
        };
        /** MetricsChart */
        MetricsChart: {
            /** Labels */
            labels: string[];
            /** Datasets */
            datasets: components["schemas"]["MetricsDataset"][];
        };
        /** MetricsCount */
        MetricsCount: {
            /**
             * Total
             * @default 0
             */
            total: number;
        };
        /** MetricsDataset */
        MetricsDataset: {
            /** Label */
            label: string;
            /** Data */
            data: number[];
        };
        /**
         * NumberOfEmployees
         * @enum {string}
         */
        NumberOfEmployees: "1-10" | "11-50" | "51-200" | "201-999" | "1000+";
        /** OAuthClientBaseRead */
        OAuthClientBaseRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Url */
            url?: string | null;
        };
        /** OAuthClientRead */
        OAuthClientRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Description */
            description: string;
            /** Url */
            url?: string | null;
            service_provider: components["schemas"]["ServiceProviderBaseRead"];
            /** Onboarded Users Count */
            onboarded_users_count: number;
            /** Onboarded Organizations Count */
            onboarded_organizations_count: number;
        };
        /** OIDCConfig */
        OIDCConfig: {
            /** Callback Url */
            callback_url: string;
            /** Authorization Endpoint */
            authorization_endpoint: string;
            /** End Session Endpoint */
            end_session_endpoint: string;
        };
        /** OIDCCreate */
        OIDCCreate: {
            /** Client Id */
            client_id: string;
            /** Client Secret */
            client_secret: string;
            /**
             * Server Metadata Url
             * Format: uri
             */
            server_metadata_url: string;
            /**
             * Enabled
             * @default false
             */
            enabled: boolean;
        };
        /** OIDCRead */
        OIDCRead: {
            /** Client Id */
            client_id: string;
            /** Client Secret */
            client_secret: string;
            /** Server Metadata Url */
            server_metadata_url: string;
            /** Enabled */
            enabled: boolean;
            config: components["schemas"]["OIDCConfig"];
        };
        /** OIDCUpdate */
        OIDCUpdate: {
            /** Client Id */
            client_id?: string | null;
            /** Client Secret */
            client_secret?: string | null;
            /** Server Metadata Url */
            server_metadata_url?: string | null;
            /** Enabled */
            enabled?: boolean | null;
        };
        /** OauthClientPlanPageRead */
        OauthClientPlanPageRead: {
            /** Plan Page Activated */
            plan_page_activated: boolean;
            /** Plan Page Redirect Url */
            plan_page_redirect_url?: string | null;
            /** Plan Page Data */
            plan_page_data?: Record<string, never> | null;
        };
        /** OptionalIdNameSchema */
        OptionalIdNameSchema: {
            /** Id */
            id?: string | null;
            /** Name */
            name?: string | null;
        };
        /** OrganizationCreate */
        OrganizationCreate: {
            /** Name */
            name: string;
            /** Domains */
            domains?: components["schemas"]["OrganizationDomainSchema"][] | null;
            industry?: components["schemas"]["Industry"] | null;
            number_of_employees_range?: components["schemas"]["NumberOfEmployees"] | null;
            /** Mfa Required */
            mfa_required?: boolean | null;
            /** Id */
            id?: string | null;
            /** Users */
            users?: components["schemas"]["OrganizationUserSchema"][] | null;
            /** Created Date */
            created_date?: string | null;
            /** Attributes */
            attributes?: Record<string, never> | null;
        };
        /** OrganizationDomainSchema */
        OrganizationDomainSchema: {
            /** Name */
            name: string;
            /** Auto Join Enabled */
            auto_join_enabled: boolean;
        };
        /** OrganizationGroupCreate */
        OrganizationGroupCreate: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Users */
            users?: string[] | null;
            /** Organization Users */
            organization_users?: string[] | null;
        };
        /** OrganizationGroupRead */
        OrganizationGroupRead: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            role?: components["schemas"]["GroupRole"] | null;
            /** Users */
            users?: components["schemas"]["IdNameSchema"][] | null;
        };
        /** OrganizationGroupUpdate */
        OrganizationGroupUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
        };
        /** OrganizationImportRead */
        OrganizationImportRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Service Provider Id */
            service_provider_id?: string | null;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /** File Name */
            file_name: string;
            /** Organizations Count */
            organizations_count?: number | null;
            /** Organizations Created */
            organizations_created?: number | null;
            /** Users Count */
            users_count?: number | null;
            /** Users Created */
            users_created?: number | null;
            import_status: components["schemas"]["SyncStatus"];
        };
        /** OrganizationMetrics */
        OrganizationMetrics: {
            users: components["schemas"]["MetricsCount"];
        };
        /** OrganizationRead */
        OrganizationRead: {
            /** Name */
            name: string;
            /** Domains */
            domains?: components["schemas"]["OrganizationDomainSchema"][] | null;
            industry?: components["schemas"]["Industry"] | null;
            number_of_employees_range?: components["schemas"]["NumberOfEmployees"] | null;
            /** Mfa Required */
            mfa_required?: boolean | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /**
             * Is Service Provider
             * @default false
             */
            is_service_provider: boolean;
            /** Short Id */
            short_id?: string | null;
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
        };
        /** OrganizationReadBase */
        OrganizationReadBase: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Is Service Provider */
            is_service_provider: boolean;
        };
        /** OrganizationReadWithAttributes */
        OrganizationReadWithAttributes: {
            /** Name */
            name: string;
            /** Domains */
            domains?: components["schemas"]["OrganizationDomainSchema"][] | null;
            industry?: components["schemas"]["Industry"] | null;
            number_of_employees_range?: components["schemas"]["NumberOfEmployees"] | null;
            /** Mfa Required */
            mfa_required?: boolean | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /**
             * Is Service Provider
             * @default false
             */
            is_service_provider: boolean;
            /** Short Id */
            short_id?: string | null;
            /**
             * Deletable
             * @default true
             */
            deletable: boolean;
            /** Attributes */
            attributes?: components["schemas"]["AttributeRead"][] | null;
        };
        /** OrganizationServiceProviderUserRead */
        OrganizationServiceProviderUserRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            status: components["schemas"]["OrganizationUserStatus"];
            invite_status?: components["schemas"]["OrganizationUserInviteStatus"] | null;
        };
        /** OrganizationUnitCreate */
        OrganizationUnitCreate: {
            /** Parent Organization Unit Id */
            parent_organization_unit_id?: string | null;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /** Id */
            id?: string | null;
        };
        /** OrganizationUnitRead */
        OrganizationUnitRead: {
            /** Parent Organization Unit Id */
            parent_organization_unit_id?: string | null;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
        };
        /** OrganizationUnitUpdate */
        OrganizationUnitUpdate: {
            /** Name */
            name?: string | null;
            /** Description */
            description?: string | null;
            /** Parent Organization Unit Id */
            parent_organization_unit_id?: string | null;
        };
        /** OrganizationUnitWithDeletableRead */
        OrganizationUnitWithDeletableRead: {
            /** Parent Organization Unit Id */
            parent_organization_unit_id?: string | null;
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Deletable */
            deletable: boolean;
        };
        /** OrganizationUpdate */
        OrganizationUpdate: {
            /** Name */
            name?: string | null;
            industry?: components["schemas"]["Industry"] | null;
            number_of_employees_range?: components["schemas"]["NumberOfEmployees"] | null;
            outstanding_payment_status?: components["schemas"]["OutstandingPaymentStatus"] | null;
            /** Attributes */
            attributes?: Record<string, never> | null;
            /** Mfa Required */
            mfa_required?: boolean | null;
        };
        /** OrganizationUserCreate */
        OrganizationUserCreate: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            job_role?: components["schemas"]["JobRole"] | null;
        };
        /** OrganizationUserImportRead */
        OrganizationUserImportRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /** File Name */
            file_name: string;
            /** Users Count */
            users_count?: number | null;
            /** Users Created */
            users_created?: number | null;
            status: components["schemas"]["SyncStatus"];
        };
        /**
         * OrganizationUserInviteStatus
         * @enum {string}
         */
        OrganizationUserInviteStatus: "ACTIVE" | "EXPIRED" | "CANCELLED";
        /** OrganizationUserOrganizationUnitRead */
        OrganizationUserOrganizationUnitRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
        };
        /** OrganizationUserRead */
        OrganizationUserRead: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            job_role?: components["schemas"]["JobRole"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            organization: components["schemas"]["OrganizationReadBase"];
            status: components["schemas"]["OrganizationUserStatus"];
            /** Created Date */
            created_date?: string | null;
            /** Updated Date */
            updated_date?: string | null;
            /** Is Active */
            is_active: boolean;
            /**
             * Status Date
             * Format: date-time
             */
            status_date: string;
            /**
             * Last Status Date
             * Format: date-time
             */
            last_status_date: string;
            unit?: components["schemas"]["OrganizationUserOrganizationUnitRead"] | null;
            created_user?: components["schemas"]["UserReadBase"] | null;
            invite_status?: components["schemas"]["OrganizationUserInviteStatus"] | null;
        };
        /** OrganizationUserReadBase */
        OrganizationUserReadBase: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            organization: components["schemas"]["OrganizationReadBase"];
            status: components["schemas"]["OrganizationUserStatus"];
            job_role?: components["schemas"]["JobRole"] | null;
            /** Created Date */
            created_date?: string | null;
            /** Updated Date */
            updated_date?: string | null;
            /** Is Active */
            is_active: boolean;
        };
        /** OrganizationUserReadWithAttributes */
        OrganizationUserReadWithAttributes: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            job_role?: components["schemas"]["JobRole"] | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            organization: components["schemas"]["OrganizationReadBase"];
            status: components["schemas"]["OrganizationUserStatus"];
            /** Created Date */
            created_date?: string | null;
            /** Updated Date */
            updated_date?: string | null;
            /** Is Active */
            is_active: boolean;
            /**
             * Status Date
             * Format: date-time
             */
            status_date: string;
            /**
             * Last Status Date
             * Format: date-time
             */
            last_status_date: string;
            unit?: components["schemas"]["OrganizationUserOrganizationUnitRead"] | null;
            created_user?: components["schemas"]["UserReadBase"] | null;
            invite_status?: components["schemas"]["OrganizationUserInviteStatus"] | null;
            /** Attributes */
            attributes?: components["schemas"]["AttributeReadWithEditable"][] | null;
        };
        /** OrganizationUserSchema */
        OrganizationUserSchema: {
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            job_role?: components["schemas"]["JobRole"] | null;
        };
        /**
         * OrganizationUserStatus
         * @enum {string}
         */
        OrganizationUserStatus: "P" | "A" | "R" | "C";
        /** OrganizationUserStatusUpdate */
        OrganizationUserStatusUpdate: {
            status: components["schemas"]["OrganizationUserStatus"];
        };
        /** OrganizationUserUpdate */
        OrganizationUserUpdate: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            job_role?: components["schemas"]["JobRole"] | null;
            /** Organization Unit Id */
            organization_unit_id?: string | null;
            /** Additional Attributes */
            additional_attributes?: Record<string, never> | null;
            /** Attributes */
            attributes?: Record<string, never> | null;
        };
        /** OrganizationUsersCreate */
        OrganizationUsersCreate: {
            /** Users */
            users: components["schemas"]["OrganizationUserCreate"][];
            /** Unit */
            unit?: string | null;
            /** Groups */
            groups?: string[] | null;
        };
        /**
         * OutstandingPaymentStatus
         * @enum {string}
         */
        OutstandingPaymentStatus: "NO_OUTSTANDING_PAYMENTS" | "OUTSTANDING_PAYMENTS";
        /** PaginationSchema[AccessEvaluationBaseRead] */
        PaginationSchema_AccessEvaluationBaseRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["AccessEvaluationBaseRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[EntitlementRead] */
        PaginationSchema_EntitlementRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["EntitlementRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[LoginAttemptRead] */
        PaginationSchema_LoginAttemptRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["LoginAttemptRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[OAuthClientRead] */
        PaginationSchema_OAuthClientRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["OAuthClientRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[OrganizationGroupRead] */
        PaginationSchema_OrganizationGroupRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["OrganizationGroupRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[OrganizationRead] */
        PaginationSchema_OrganizationRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["OrganizationRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[OrganizationUserRead] */
        PaginationSchema_OrganizationUserRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["OrganizationUserRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[RoleRead] */
        PaginationSchema_RoleRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["RoleRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[ServiceProviderOrganizationRead] */
        PaginationSchema_ServiceProviderOrganizationRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["ServiceProviderOrganizationRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[ServiceProviderOrganizationUserRead] */
        PaginationSchema_ServiceProviderOrganizationUserRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["ServiceProviderOrganizationUserRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[ServiceProviderRead] */
        PaginationSchema_ServiceProviderRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["ServiceProviderRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[ServiceProviderUserRead] */
        PaginationSchema_ServiceProviderUserRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["ServiceProviderUserRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[UserRead] */
        PaginationSchema_UserRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["UserRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PaginationSchema[UserSessionRead] */
        PaginationSchema_UserSessionRead_: {
            /** Offset */
            offset: number;
            /** Limit */
            limit: number;
            /** Results */
            results: components["schemas"]["UserSessionRead"][];
            /** Size */
            size: number;
            /** Total */
            total?: number | null;
        };
        /** PasswordRequirementRead */
        PasswordRequirementRead: {
            /** Name */
            name: string;
            /** Value */
            value: string | number;
        };
        /**
         * PolicyOutcome
         * @enum {string}
         */
        PolicyOutcome: "ALLOW" | "DENY" | "AUDIT" | "INCONCLUSIVE" | "ROLE";
        /** PolicyRead */
        PolicyRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            type: components["schemas"]["OptionalIdNameSchema"];
        };
        /** RoleRead */
        RoleRead: {
            /** Name */
            name: string;
            /** Description */
            description?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Service Provider Id
             * Format: uuid
             */
            service_provider_id: string;
        };
        /** ServiceProviderBaseRead */
        ServiceProviderBaseRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
        };
        /** ServiceProviderCreate */
        ServiceProviderCreate: {
            /** Organization Id */
            organization_id?: string | null;
            /** Name */
            name?: string | null;
        };
        /** ServiceProviderLogoRead */
        ServiceProviderLogoRead: {
            /** Logo Url */
            logo_url: string;
        };
        /** ServiceProviderMetrics */
        ServiceProviderMetrics: {
            users: components["schemas"]["MetricsCount"];
            organizations: components["schemas"]["MetricsCount"];
            average_org_users: components["schemas"]["MetricsCount"];
        };
        /** ServiceProviderOrganizationCreate */
        ServiceProviderOrganizationCreate: {
            /** Name */
            name: string;
            /**
             * Admin Email
             * Format: email
             */
            admin_email: string;
            /** User Emails */
            user_emails?: string[] | null;
        };
        /** ServiceProviderOrganizationRead */
        ServiceProviderOrganizationRead: {
            organization: components["schemas"]["OrganizationReadBase"];
            /** Is Active */
            is_active: boolean;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /**
             * Was Created
             * @default false
             */
            was_created: boolean;
        };
        /** ServiceProviderOrganizationReadWithAttributes */
        ServiceProviderOrganizationReadWithAttributes: {
            organization: components["schemas"]["OrganizationReadBase"];
            /** Is Active */
            is_active: boolean;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /**
             * Was Created
             * @default false
             */
            was_created: boolean;
            /** Attributes */
            attributes?: components["schemas"]["AttributeRead"][] | null;
        };
        /** ServiceProviderOrganizationUserRead */
        ServiceProviderOrganizationUserRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            user: components["schemas"]["UserReadBase"];
            /** Last Login Date */
            last_login_date?: string | null;
            last_login_access?: components["schemas"]["PolicyOutcome"] | null;
            organization_user?: components["schemas"]["OrganizationServiceProviderUserRead"] | null;
            organization: components["schemas"]["OrganizationReadBase"];
        };
        /** ServiceProviderOrganizationUserReadWithAttributes */
        ServiceProviderOrganizationUserReadWithAttributes: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            user: components["schemas"]["UserReadBase"];
            /** Last Login Date */
            last_login_date?: string | null;
            last_login_access?: components["schemas"]["PolicyOutcome"] | null;
            organization_user?: components["schemas"]["OrganizationServiceProviderUserRead"] | null;
            organization: components["schemas"]["OrganizationReadBase"];
            /** Attributes */
            attributes?: components["schemas"]["AttributeReadWithEditable"][] | null;
        };
        /** ServiceProviderRead */
        ServiceProviderRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Faq Url */
            faq_url?: string | null;
            /** From Email */
            from_email?: string | null;
            /** Logo Url */
            logo_url?: string | null;
            /** Button Background Color */
            button_background_color?: string | null;
            /** Button Text Color */
            button_text_color?: string | null;
            /** Organization Created Date */
            organization_created_date?: string | null;
            /** Created Date */
            created_date?: string | null;
        };
        /** ServiceProviderUpdate */
        ServiceProviderUpdate: {
            /** Faq Url */
            faq_url?: string | null;
            /** From Email */
            from_email?: string | null;
            /** Button Background Color */
            button_background_color?: string | null;
            /** Button Text Color */
            button_text_color?: string | null;
        };
        /** ServiceProviderUserMeRead */
        ServiceProviderUserMeRead: {
            /** Onboarding Completed */
            onboarding_completed: boolean;
        };
        /** ServiceProviderUserRead */
        ServiceProviderUserRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            user: components["schemas"]["UserReadBase"];
            /** Last Login Date */
            last_login_date?: string | null;
            last_login_access?: components["schemas"]["PolicyOutcome"] | null;
            organization_user?: components["schemas"]["OrganizationServiceProviderUserRead"] | null;
        };
        /** ServiceProviderUserUpdate */
        ServiceProviderUserUpdate: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
        };
        /**
         * SocialAccountType
         * @enum {string}
         */
        SocialAccountType: "G" | "M";
        /** SubOrganizationCreate */
        SubOrganizationCreate: {
            organization: components["schemas"]["OrganizationCreate"];
            user: components["schemas"]["UserSchema"];
        };
        /**
         * SyncStatus
         * @enum {string}
         */
        SyncStatus: "PENDING" | "SUCCESS" | "FAILURE";
        /** TOTPConfirmationRead */
        TOTPConfirmationRead: {
            /** Qr Url */
            qr_url: string;
        };
        /** TOTPRead */
        TOTPRead: {
            /** Confirmed */
            confirmed: boolean;
        };
        /** TOTPUpdate */
        TOTPUpdate: {
            /** Code */
            code: string;
        };
        /** TOTPVerificationRead */
        TOTPVerificationRead: {
            /** Confirmed */
            confirmed: boolean;
            /** Backup Codes */
            backup_codes: string[];
        };
        /** UserAccess */
        UserAccess: {
            /** User Access */
            user_access: components["schemas"]["UserOrganizationAccess"][];
        };
        /** UserAccessEvaluationRead */
        UserAccessEvaluationRead: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
        };
        /** UserEmailChange */
        UserEmailChange: {
            /** Password */
            password: string;
            /**
             * Email
             * Format: email
             */
            email: string;
        };
        /** UserEmailOTPStatusRead */
        UserEmailOTPStatusRead: {
            /** Enabled */
            enabled: boolean;
        };
        /** UserEmailOTPStatusUpdate */
        UserEmailOTPStatusUpdate: {
            /** Enabled */
            enabled: boolean;
        };
        /** UserEmailRead */
        UserEmailRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Verified */
            verified: boolean;
            /** Expiration Date */
            expiration_date?: string | null;
        };
        /** UserEmailsRead */
        UserEmailsRead: {
            /** Emails */
            emails: components["schemas"]["UserEmailRead"][];
        };
        /** UserMFARequiredStatusRead */
        UserMFARequiredStatusRead: {
            /** Mfa Required */
            mfa_required: boolean;
        };
        /** UserMFARequiredStatusUpdate */
        UserMFARequiredStatusUpdate: {
            /** Mfa Required */
            mfa_required: boolean;
        };
        /** UserMagicLinkRead */
        UserMagicLinkRead: {
            /** Enabled */
            enabled: boolean;
        };
        /** UserMagicLinkUpdate */
        UserMagicLinkUpdate: {
            /** Enabled */
            enabled: boolean;
        };
        /** UserOrganizationAccess */
        UserOrganizationAccess: {
            /**
             * Organization Id
             * Format: uuid
             */
            organization_id: string;
            /** Organization Name */
            organization_name: string;
            /**
             * Organization User Id
             * Format: uuid
             */
            organization_user_id: string;
            /** Organization Group Ids */
            organization_group_ids: string[];
            /** Organization Unit Id */
            organization_unit_id: string | null;
        };
        /** UserPasswordCreate */
        UserPasswordCreate: {
            /** New */
            new: string;
        };
        /** UserPasswordUpdate */
        UserPasswordUpdate: {
            /** New */
            new: string;
            /** Old */
            old: string;
        };
        /** UserRead */
        UserRead: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Is Active */
            is_active: boolean;
            /** Is Verified */
            is_verified: boolean;
            /** Has Password */
            has_password: boolean;
            /** Magic Link Enabled */
            magic_link_enabled: boolean;
            /** Email Otp Enabled */
            email_otp_enabled: boolean;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Last Login Date */
            last_login_date?: string | null;
            /** Organization Users */
            organization_users: components["schemas"]["OrganizationUserReadBase"][];
            /** Mfa Required */
            mfa_required: boolean;
        };
        /** UserReadBase */
        UserReadBase: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
        };
        /** UserReadWithAttributes */
        UserReadWithAttributes: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Is Active */
            is_active: boolean;
            /** Is Verified */
            is_verified: boolean;
            /** Has Password */
            has_password: boolean;
            /** Magic Link Enabled */
            magic_link_enabled: boolean;
            /** Email Otp Enabled */
            email_otp_enabled: boolean;
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Last Login Date */
            last_login_date?: string | null;
            /** Organization Users */
            organization_users: components["schemas"]["OrganizationUserReadBase"][];
            /** Mfa Required */
            mfa_required: boolean;
            /** Attributes */
            attributes?: components["schemas"]["AttributeReadWithEditable"][] | null;
        };
        /** UserSchema */
        UserSchema: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
        };
        /** UserSessionRead */
        UserSessionRead: {
            /** Session Token */
            session_token: string;
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /** User Type */
            user_type: string;
            /**
             * Valid Till
             * Format: date-time
             */
            valid_till: string;
            /** Ip Address */
            ip_address?: string | null;
            /** User Agent */
            user_agent?: string | null;
            /**
             * Create Date
             * Format: date-time
             */
            create_date: string;
        };
        /** UserSocialAccountRead */
        UserSocialAccountRead: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Username */
            username: string;
            account_type: components["schemas"]["SocialAccountType"];
        };
        /** UserUpdate */
        UserUpdate: {
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
            /** Profile Picture Url */
            profile_picture_url?: string | null;
            /** Attributes */
            attributes?: Record<string, never> | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /** WebAuthnOptionsRead */
        WebAuthnOptionsRead: {
            /** Webauthn Options */
            webauthn_options: string;
        };
        /** WebAuthnRead */
        WebAuthnRead: {
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Confirmed */
            confirmed: boolean;
            /** Last Login Date */
            last_login_date?: string | null;
        };
        /** WebAuthnStatusRead */
        WebAuthnStatusRead: {
            /** Confirmed */
            confirmed: boolean;
        };
        /** WebAuthnUpdate */
        WebAuthnUpdate: {
            /** Credential */
            credential: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    load_data_load__dataset_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                dataset_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unload_e2e_unload_e2e_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    unload_graphql_unload_graphql_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    test_queue_testqueue_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    test_exception_test_exception_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    access_evaluation_read_access_evaluations__access_evaluation_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Access Evaluation */
                access_evaluation_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Access Evaluation Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessEvaluationRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Access Evaluation */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_access_evaluation_read_service_providers__service_provider_id__access_evaluations__access_evaluation_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Access Evaluation */
                access_evaluation_id: string;
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Access Evaluation Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessEvaluationRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Access Evaluation */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_access_evaluation_read_organizations__organization_id__access_evaluations__access_evaluation_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Access Evaluation */
                access_evaluation_id: string;
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Access Evaluation Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AccessEvaluationRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Access Evaluation */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    access_evaluations_read_access_evaluations_get: {
        parameters: {
            query?: {
                /** @description ID of the Organization */
                organization_id?: string | null;
                /** @description ID of the Service Provider */
                service_provider_id?: string | null;
                /** @description Min Date of Access Evaluations */
                from_date?: string | null;
                /** @description Max Date of Access Evaluations */
                until_date?: string | null;
                /** @description Term to search for the Access Evaluations */
                query?: string | null;
                /** @description Access Evaluations Offset */
                offset?: number;
                /** @description Max number of Access Evaluations */
                limit?: number;
                /** @description Attribute used to sort the Access Evaluations: ['evaluation_date', 'outcome', 'resource_urn', 'user.email', 'organization.name', 'service_provider.name', 'oauth_client.name'] */
                sort?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Access Evaluation Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_AccessEvaluationBaseRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_attempts_read_login_attempts_get: {
        parameters: {
            query?: {
                /** @description User ID */
                user_id?: string | null;
                /** @description Client ID */
                client_id?: string | null;
                /** @description Service Provider ID */
                service_provider_id?: string | null;
                /** @description Organizations id */
                organization_id?: string | null;
                /** @description Login Source */
                login_source?: components["schemas"]["LoginSource"] | null;
                /** @description Login Outcome */
                login_outcome?: components["schemas"]["LoginOutcome"] | null;
                /** @description IP address */
                ip_address?: string | null;
                /** @description Login Attempts from Date */
                from_date?: string | null;
                /** @description Login attempts Until */
                until_date?: string | null;
                /** @description Term to search for in the login attempts */
                query?: string | null;
                /** @description Login Attempts Offset */
                offset?: number;
                /** @description Max number of Login Attempts */
                limit?: number;
                /** @description Attribute used to sort the Login Attempts: ['attempt_date', 'login_outcome', 'login_access', 'login_source', 'user.first_name', 'organization.name'] */
                sort?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Login Attempts Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_LoginAttemptRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    login_attempts_me_read_login_attempts__me_get: {
        parameters: {
            query?: {
                /** @description Client ID */
                client_id?: string | null;
                /** @description Service Provider ID */
                service_provider_id?: string | null;
                /** @description Organizations id */
                organization_id?: string | null;
                /** @description Login Source */
                login_source?: components["schemas"]["LoginSource"] | null;
                /** @description Login Outcome */
                login_outcome?: components["schemas"]["LoginOutcome"] | null;
                /** @description IP address */
                ip_address?: string | null;
                /** @description Login Attempts from Date */
                from_date?: string | null;
                /** @description Login attempts Until */
                until_date?: string | null;
                /** @description Login Attempts Offset */
                offset?: number;
                /** @description Max number of Login Attempts */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Login Attempts Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_LoginAttemptRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organizations_read_organizations_get: {
        parameters: {
            query?: {
                /** @description ID of the Organization */
                organization_id?: string[];
                /** @description List of Industries to filter */
                industries?: components["schemas"]["Industry"][] | null;
                /** @description List of Number of employees to filter */
                number_of_employees?: components["schemas"]["NumberOfEmployees"][] | null;
                /** @description Organizations Offset */
                offset?: number;
                /** @description Max number of Organizations */
                limit?: number;
                /** @description Term to search for in the Organizations */
                query?: string | null;
                /** @description Attribute used to sort the Organizations: ['name', 'created_date'] */
                sort?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organizations Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OrganizationRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organizations_create_organizations_post: {
        parameters: {
            query?: never;
            header: {
                /** @description ID of the OAuth Client where the Organization was Created */
                "X-OAuth-Client-ID": string;
                /** @description ID of the Service Provider where the Organization was Created */
                "X-Service-Provider-ID": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationCreate"];
            };
        };
        responses: {
            /** @description Organization Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationReadWithAttributes"];
                };
            };
            /** @description Attribute Type non existent or is a User Attribute */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Existing Organization with same ID */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_read_organizations__organization_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationReadWithAttributes"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organizations_delete_organizations__organization_id__delete: {
        parameters: {
            query?: {
                /** @description ID of the Organization with which deleted Organization will be replaced */
                replacement_organization_id?: string | null;
                /** @description Organization Deletion Code */
                code?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Deletion Code sent to User */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Replacement Organization, or Replacement Organization ID same as the Organization ID, or Organization is an SP but Replacement Organization is not, or Deletion Code provided is invalid or expired */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Organization has an Outstanding Payment or an Active Agreement */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    organizations_patch_organizations__organization_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUpdate"];
            };
        };
        responses: {
            /** @description Organization Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationReadWithAttributes"];
                };
            };
            /** @description Attribute Type non existent or is a User Attribute */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_service_providers_read_organizations__organization_id__service_providers_get: {
        parameters: {
            query?: {
                /** @description ID of the Service Providers */
                service_provider_id?: string[];
            };
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Service Providers Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_service_providers_create_organizations__organization_id__service_providers_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Service Providers Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization was a Service Provider */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_service_provider_read_organizations__organization_id__service_providers__service_provider_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Service Provider Information Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Service Provider, or Organization doesn't belong to the Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_metrics_read_organizations__organization_id__metrics_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Metrics Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationMetrics"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_metrics_active_users_read_organizations__organization_id__metrics_active_users_get: {
        parameters: {
            query: {
                /** @description Min Date for Active User */
                from_date: string;
                /** @description Max Date for Active User */
                until_date: string;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Metrics - Active Users Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricsChart"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_metrics_failed_logins_read_organizations__organization_id__metrics_failed_logins_get: {
        parameters: {
            query: {
                /** @description Min Date for Failed Login */
                from_date: string;
                /** @description Max Date for Failed Login */
                until_date: string;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Metrics - Failed Logins Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricsChart"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_metrics_signups_read_organizations__organization_id__metrics_signups_get: {
        parameters: {
            query: {
                /** @description Min Date for Signup */
                from_date: string;
                /** @description Max Date for Signup */
                until_date: string;
            };
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Metrics - Signups Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricsChart"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_user_delete_organizations__organization_id__users__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization User Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_user_edit_organizations__organization_id__users__user_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUserUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserReadWithAttributes"];
                };
            };
            /** @description Organization User Updated */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization User With Status Pending Can't Update First or Last Name, or Attribute given is non existent or not an Organization User Attribute */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_user_status_edit_organizations__organization_id__users__user_id__status_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUserStatusUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserRead"];
                };
            };
            /** @description Organization User Updated */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Pending status not allowed in payload */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_user_read_me_organizations__organization_id__users__me_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization User Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserReadWithAttributes"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_users_create_me_organizations__organization_id__users__me_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization User Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Successful Response */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization User Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_user_enable_put_organizations__organization_id__users__org_user_id__enable_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization User */
                org_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserRead"];
                };
            };
            /** @description Organization User Updated */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_user_disable_put_organizations__organization_id__users__org_user_id__disable_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization User */
                org_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserRead"];
                };
            };
            /** @description Organization User Updated */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_users_read_organizations__organization_id__users_get: {
        parameters: {
            query?: {
                /** @description ID of the Organization User */
                organization_user_id?: string[];
                /** @description ID of the Organization Unit */
                organization_unit_id?: string | null;
                /** @description Term to search for in Organization Users */
                query?: string | null;
                /** @description Email Address of the Organization Users */
                email?: string | null;
                /** @description Active Status of the Organization Users */
                active?: boolean | null;
                /** @description Status of the Organization Users */
                status?: components["schemas"]["OrganizationUserStatus"] | null;
                /** @description If true, fetch all Invited Organization Users */
                invited?: boolean | null;
                /** @description Organization Users Offset */
                offset?: number;
                /** @description Max number of Organization Users */
                limit?: number;
                /** @description Attribute used to sort the Organization Users: ['status', 'job_role', 'created_date', 'first_name', 'last_name', 'last_status_date', 'status_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Users Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OrganizationUserRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_organization_users_organizations__organization_id__users_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUsersCreate"];
            };
        };
        responses: {
            /** @description Organization User Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_user_invitation_create_organizations__organization_id__users__user_id__invitation_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization User Invited */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_user_read_organizations__organization_id__users__organization_user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization User */
                organization_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization User Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserReadWithAttributes"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_user_login_attempts_read_organizations__organization_id__users__organization_user_id__login_attempts_get: {
        parameters: {
            query?: {
                /** @description Login Source */
                login_source?: components["schemas"]["LoginSource"] | null;
                /** @description Login Outcome */
                login_outcome?: components["schemas"]["LoginOutcome"] | null;
                /** @description IP address */
                ip_address?: string | null;
                /** @description Login Attempts from Date */
                from_date?: string | null;
                /** @description Login attempts Until */
                until_date?: string | null;
                /** @description Term to search for in the login attempts */
                query?: string | null;
                /** @description Login Attempts Offset */
                offset?: number;
                /** @description Max number of Login Attempts */
                limit?: number;
                /** @description Attribute used to sort the Login Attempts: ['attempt_date', 'login_outcome', 'login_access', 'login_source'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization User */
                organization_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Login Attempts Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_LoginAttemptRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_organization_user_password_organizations__organization_id__users__organization_user_id__password_reset_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization user */
                organization_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization User Password Updated */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid Organization or User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_organization_user_totp_organizations__organization_id__users__organization_user_id__totp_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization User */
                organization_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization User TOTP reset */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization or User or TOTP not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    import_organization_users_organizations__organization_id__users_imports_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_import_organization_users_organizations__organization_id__users_imports_post"];
            };
        };
        responses: {
            /** @description Organization Users Import File Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserImportRead"];
                };
            };
            /** @description Invalid File Format or Record Missing User Email or Record Has Invalid Role */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description File Processing in Progress or File Import Successfully Completed */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid File Type */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    import_organization_user_read_organizations__organization_id__users_imports__organization_user_import_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization User Import */
                organization_user_import_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Users Import Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserImportRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization or Organization Users Import Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_user_groups_read_organizations__organization_id__users__user_id__groups_get: {
        parameters: {
            query?: {
                /** @description Term to search for in Organization groups */
                query?: string | null;
                /** @description User groups offset */
                offset?: number | null;
                /** @description Max number of user groups */
                limit?: number | null;
                /** @description Attribute used to sort the Results: ['name', 'created_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization User Groups Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OrganizationGroupRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_user_organization_unit_read_organizations__organization_id__users__user_id__units_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserOrganizationUnitRead"];
                };
            };
            /** @description Organization User's Organization unit Retrieved */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_groups_read_organizations__organization_id__groups_get: {
        parameters: {
            query?: {
                /** @description ID of the Organization Group */
                organization_group_id?: string[];
                /** @description Term to search for in Organization groups */
                query?: string | null;
                /** @description Organization Groups Offset */
                offset?: number;
                /** @description Max number of Organization Groups */
                limit?: number;
                /** @description Attribute used to sort the Results: ['users_count', 'role', 'name', 'created_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Groups Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OrganizationGroupRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_groups_create_organizations__organization_id__groups_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationGroupCreate"];
            };
        };
        responses: {
            /** @description Organization Group Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationGroupRead"];
                };
            };
            /** @description Missing User */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Existing Organization Group with same Name */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_group_read_organizations__organization_id__groups__organization_group_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization Group */
                organization_group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Group Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationGroupRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization Group */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_group_delete_organizations__organization_id__groups__organization_group_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization Group */
                organization_group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Group Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Reserved Organization Groups cannot be Deleted */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization Group */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_group_edit_organizations__organization_id__groups__organization_group_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization Group */
                organization_group_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationGroupUpdate"];
            };
        };
        responses: {
            /** @description Organization Group Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationGroupRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization Group */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_group_organization_users_create_organizations__organization_id__groups__organization_group_id__organization_users_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization Group */
                organization_group_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description Organization Users added to Organization Group */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdNameSchema"][];
                };
            };
            /** @description No Organization Users provided or Missing Organization User */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization Group */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Existing Organization User in the Organization Group */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_group_users_read_organizations__organization_id__groups__organization_group_id__users_get: {
        parameters: {
            query?: {
                /** @description Term to search for in Organization Users' name or email */
                query?: string | null;
                /** @description Offset */
                offset?: number;
                /** @description Max number of Organization Users to return */
                limit?: number;
                /** @description Attribute used to sort the Results: ['job_role', 'created_date', 'status', 'status_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization Group */
                organization_group_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Users for Organization Group Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OrganizationUserRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization Group */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_group_users_create_organizations__organization_id__groups__organization_group_id__users_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization Group */
                organization_group_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description Users added to Organization Group */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IdNameSchema"][];
                };
            };
            /** @description No Users provided or Missing User */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization Group */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Existing User in the Organization Group */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_group_user_delete_organizations__organization_id__groups__organization_group_id__users__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization Group */
                organization_group_id: string;
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User removed from Organization Group */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User is last member of the admin Organization Group */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization Group or User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_units_read_organizations__organization_id__units_get: {
        parameters: {
            query?: {
                /** @description ID of the Organization Unit */
                organization_unit_id?: string[];
                /** @description Term to search for in the Units */
                query?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Units Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUnitRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_units_create_organizations__organization_id__units_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUnitCreate"];
            };
        };
        responses: {
            /** @description Organization Unit Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUnitRead"];
                };
            };
            /** @description Invalid Organization Unit Parent */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Existing Organization Unit with same Name */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_unit_read_organizations__organization_id__units__organization_unit_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization Unit */
                organization_unit_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Unit Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUnitWithDeletableRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization Unit */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_unit_delete_organizations__organization_id__units__organization_unit_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization Unit */
                organization_unit_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization Unit Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Organization Unit has associated Users or child Units */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization Unit */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_unit_edit_organizations__organization_id__units__organization_unit_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization Unit */
                organization_unit_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUnitUpdate"];
            };
        };
        responses: {
            /** @description Organization Unit Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUnitRead"];
                };
            };
            /** @description Invalid Organization Unit Parent */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Existing Organization Unit with same Name */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_unit_users_add_organizations__organization_id__units__organization_unit_id__users_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization Unit */
                organization_unit_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description User added to Organization Unit */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Invalid User */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization Unit */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    organization_unit_user_delete_organizations__organization_id__units__organization_unit_id__organization_users__organization_user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Organization Unit */
                organization_unit_id: string;
                /** @description ID of the Organization User */
                organization_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User removed from Organization Unit */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Organization Unit or User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sub_organizations_read_organizations__organization_id__sub_organizations_get: {
        parameters: {
            query?: {
                /** @description List of Industries to filter */
                industries?: components["schemas"]["Industry"][] | null;
                /** @description List of Number of employees to filter */
                number_of_employees?: components["schemas"]["NumberOfEmployees"][] | null;
                /** @description Term to search for in the Organizations using name and domains */
                query?: string | null;
                /** @description Offset to start from */
                offset?: number;
                /** @description Max number retrieved at once */
                limit?: number;
                /** @description Attribute used to sort the Organizations by industry or name: ['industry', 'name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sub-Organizations Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OrganizationRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    sub_organizations_create_organizations__organization_id__sub_organizations_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubOrganizationCreate"];
            };
        };
        responses: {
            /** @description Sub-Organization Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_sub_organizations_organizations__organization_id__sub_organizations__sub_organization_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Sub Organization */
                sub_organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sub-Organization Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Mismatched Sub-Organization Parent */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Sub-Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    oidc_read_organizations__organization_id__oidc_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OIDC Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OIDCRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Missing OIDC for Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    oidc_create_organizations__organization_id__oidc_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OIDCCreate"];
            };
        };
        responses: {
            /** @description OIDC Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OIDCRead"];
                };
            };
            /** @description Unable to reach Server Metadata URL or Server Metadata URL is not a valid OIDC */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Existing OIDC for Organization */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    oidc_delete_organizations__organization_id__oidc_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OIDC Removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or OIDC for Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    oidc_update_organizations__organization_id__oidc_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OIDCUpdate"];
            };
        };
        responses: {
            /** @description OIDC Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OIDCRead"];
                };
            };
            /** @description Unable to reach Server Metadata URL or Server Metadata URL is not a valid OIDC */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Organization or Missing OIDC for Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    roles_read_service_providers__service_provider_id__roles_get: {
        parameters: {
            query?: {
                /** @description Term to search for in the Roles */
                query?: string | null;
                /** @description Roles Offset */
                offset?: number;
                /** @description Max number of Roles */
                limit?: number;
                /** @description Attribute used to sort the Roles: ['name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Roles Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_RoleRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    role_read_service_providers__service_provider_id__roles__role_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Role */
                role_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Role Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoleRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider or Role Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    resource_read_resources__resource_urn__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description URN of the Resource */
                resource_urn: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Access Granted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Resource Type */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_providers_read_service_providers_get: {
        parameters: {
            query?: {
                /** @description Service Providers Offset */
                offset?: number;
                /** @description Max number of Service Providers */
                limit?: number;
                /** @description Term to search for in the Service Providers */
                query?: string | null;
                /** @description Attribute used to sort the Service Providers: ['from_email', 'logo_sync_status', 'created_date', 'name', 'organization.created_date'] */
                sort?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Providers Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_ServiceProviderRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_providers_create_service_providers_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServiceProviderCreate"];
            };
        };
        responses: {
            /** @description Service Provider Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_read_service_providers__service_provider_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_service_provider_service_providers__service_provider_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServiceProviderUpdate"];
            };
        };
        responses: {
            /** @description Service Provider Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    upload_service_provider_logo_service_providers__service_provider_id__logo_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_upload_service_provider_logo_service_providers__service_provider_id__logo_post"];
            };
        };
        responses: {
            /** @description Logo Uploaded */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderLogoRead"];
                };
            };
            /** @description Invalid File Type or Size */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Logo Upload Already in Progress */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_service_provider_logo_service_providers__service_provider_id__logo_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Logo Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider Has No Logo */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_entitlements_service_providers__service_provider_id__entitlements_get: {
        parameters: {
            query?: {
                /** @description Entitlements Offset */
                offset?: number;
                /** @description Max number of Entitlements */
                limit?: number;
                /** @description Term to search for in the Entitlements */
                query?: string | null;
                /** @description Attribute used to sort the Entitlements: ['name'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_EntitlementRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_entitlement_service_providers__service_provider_id__entitlements__entitlement_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Entitlement */
                entitlement_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EntitlementRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Entitlement */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_metrics_read_service_providers__service_provider_id__metrics_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Metrics Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderMetrics"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_metrics_active_users_read_service_providers__service_provider_id__metrics_active_users_get: {
        parameters: {
            query: {
                /** @description Min Date for Active User */
                from_date: string;
                /** @description Max Date for Active User */
                until_date: string;
            };
            header?: never;
            path: {
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Metrics - Active Users Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricsChart"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_metrics_failed_logins_read_service_providers__service_provider_id__metrics_failed_logins_get: {
        parameters: {
            query: {
                /** @description Min Date for Failed Login */
                from_date: string;
                /** @description Max Date for Failed Login */
                until_date: string;
            };
            header?: never;
            path: {
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Metrics - Failed Logins Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricsChart"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_metrics_signups_read_service_providers__service_provider_id__metrics_signups_get: {
        parameters: {
            query: {
                /** @description Min Date for Signup */
                from_date: string;
                /** @description Max Date for Signup */
                until_date: string;
            };
            header?: never;
            path: {
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Metrics - Signups Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetricsChart"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    oauth_client_plan_page_read_service_providers__service_provider_id__oauth_clients__oauth_client_id__plan_page_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the OAuth Client */
                oauth_client_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth Client Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OauthClientPlanPageRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or OAuth Client */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_organization_users_read_service_providers__service_provider_id__organization_users_get: {
        parameters: {
            query?: {
                /** @description ID of the Organization User */
                organization_user_id?: string | null;
                /** @description Term to search for in the Service Provider Organization Users */
                query?: string | null;
                /** @description Service Provider Organization Users Offset */
                offset?: number;
                /** @description Max number of Service Provider Organization Users */
                limit?: number;
                /** @description Attribute used to sort the Service Provider Organization Users: ['u.email', 'u.first_name', 'u.last_name', 'o.name', 'last_login_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Organization Users Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_ServiceProviderOrganizationUserRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_organization_user_read_service_providers__service_provider_id__organization_users__service_provider_organization_user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Service Provider Organization User */
                service_provider_organization_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Organization User Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderOrganizationUserReadWithAttributes"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Organization User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_organizations_read_service_providers__service_provider_id__organizations_get: {
        parameters: {
            query?: {
                /** @description IDs of the Organization(s) to retrieve */
                organization_id?: string[];
                /** @description Service Provider Organizations Offset */
                offset?: number;
                /** @description Max number of Service Provider Organizations */
                limit?: number;
                /** @description Term to search for in the Service Provider Organizations */
                query?: string | null;
                /** @description Active/Inactive Service Provider Organizations */
                is_active?: boolean | null;
                /** @description Attribute used to sort the Service Provider Organizations: ['name', 'created_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Organizations Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_ServiceProviderOrganizationRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_organization_create_service_providers__service_provider_id__organizations_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServiceProviderOrganizationCreate"];
            };
        };
        responses: {
            /** @description Organization created and added to Service Provider */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderOrganizationRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_organization_users_read_service_providers__service_provider_id__organizations__organization_id__users_get: {
        parameters: {
            query?: {
                /** @description ID of the Organization User */
                organization_user_id?: string[];
                /** @description Service Provider Organizations Offset */
                offset?: number;
                /** @description Max number of Service Provider Organizations */
                limit?: number;
                /** @description Term to search for in the Service Provider Organizations */
                query?: string | null;
                /** @description Attribute used to sort the Service Provider Organizations: ['first_name', 'last_name', 'email', 'last_login_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Users Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_ServiceProviderUserRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_organization_users_create_service_providers__service_provider_id__organizations__organization_id__users_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUsersCreate"];
            };
        };
        responses: {
            /** @description Service Provider Organization User Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderUserRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description One or more Emails are associated with existing Org Users */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_organization_user_detail_read_service_providers__service_provider_id__organizations__organization_id__users__service_provider_user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the Service Provider User */
                service_provider_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Users Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderOrganizationUserReadWithAttributes"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_organization_details_read_service_providers__service_provider_id__organizations__organization_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Organization Details Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderOrganizationReadWithAttributes"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_organization_deactivate_service_providers__service_provider_id__organizations__organization_id__deactivate_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Organization */
                organization_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Organization Deactivated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderOrganizationRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider Organization Deactivated */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_organization_user_status_update_service_providers__service_provider_id__organizations__organization_id__users__user_id__status_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OrganizationUserStatusUpdate"];
            };
        };
        responses: {
            /** @description Service Provider Organization User Status Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationUserRead"];
                };
            };
            /** @description Pending status not allowed in payload */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Organization or User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Existing Organization User Status is not Pending */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    service_provider_organization_user_invitation_create_service_providers__service_provider_id__organizations__organization_id__users__user_id__invitation_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Organization */
                organization_id: string;
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Organization User Invited */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Organization or User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description Existing Organization User Status is not Pending or Cancelled */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Too many requests have been sent to the same User in a specified time period */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    import_service_provider_organizations_and_users_service_providers__service_provider_id__organizations_imports_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["Body_import_service_provider_organizations_and_users_service_providers__service_provider_id__organizations_imports_post"];
            };
        };
        responses: {
            /** @description File Import Accepted */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationImportRead"];
                };
            };
            /** @description Invalid File Type or Organization/s Missing Admin User */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description File Processing in Progress or File Import Successfully Completed */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_service_provider_organization_import_service_providers__service_provider_id__organizations_imports__organization_import_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
                /** @description ID of the Organization Import */
                organization_import_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationImportRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Provider Not Found or Organization Import Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_user_me_read_service_provider_users__me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider User Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ServiceProviderUserMeRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    service_provider_user_edit_service_provider_users__service_provider_user_id__patch: {
        parameters: {
            query?: never;
            header: {
                /** @description ID of the OAuth Client where the User was Updated */
                "X-OAuth-Client-ID": string;
            };
            path: {
                /** @description ID of the Service Provider User */
                service_provider_user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServiceProviderUserUpdate"];
            };
        };
        responses: {
            /** @description Service Provider User Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Missing OAuth Client */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_user_onboarding_completed_read_service_provider_users__service_provider_user_id__onboarding_completed_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Service Provider User */
                service_provider_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider User Onboarding Completed Status Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Onboarding is not in Completed Status */
            417: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_user_onboarding_completed_edit_service_provider_users__service_provider_user_id__onboarding_completed_put: {
        parameters: {
            query?: never;
            header: {
                /** @description ID of the Organization where the Onboarding was Completed */
                "X-Organization-ID": string;
                /** @description ID of the OAuth Client where the Onboarding was Completed */
                "X-OAuth-Client-ID": string;
                /** @description OAuth Access Token used where the Onboarding was Completed */
                "X-OAuth-Access-Token"?: string | null;
            };
            path: {
                /** @description ID of the Service Provider User */
                service_provider_user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider User Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Onboarding was in Completed Status */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    service_provider_organization_users_read_service_provider_users__service_provider_id__users_get: {
        parameters: {
            query?: {
                /** @description ID of the Organization */
                organization_id?: string | null;
                /** @description ID of the Organization User */
                organization_user_id?: string[];
                /** @description Service Provider Organizations Offset */
                offset?: number;
                /** @description Max number of Service Provider Organizations */
                limit?: number;
                /** @description Term to search for in the Service Provider Organizations */
                query?: string | null;
                /** @description Attribute used to sort the Service Provider Organizations: ['first_name', 'last_name', 'email', 'last_login_date'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the Service Provider */
                service_provider_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Service Provider Users Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_ServiceProviderUserRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Service Provider or Organization */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    oauth_clients_read_oauth_clients_get: {
        parameters: {
            query?: {
                /** @description Term to search for in the OAuth Clients */
                query?: string | null;
                /** @description OAuth Clients Offset */
                offset?: number;
                /** @description Max number of OAuth Clients */
                limit?: number;
                /** @description Attribute used to sort the OAuth Clients: ['name'] */
                sort?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth Clients Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_OAuthClientRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    oauth_client_read_oauth_clients__oauth_client_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the OAuth Client */
                oauth_client_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth Client Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OAuthClientRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing OAuth Client */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    password_requirements_read_settings_password_requirements_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Password Requirements Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": (components["schemas"]["PasswordRequirementRead"] | null)[];
                };
            };
        };
    };
    users_read_users_get: {
        parameters: {
            query?: {
                /** @description Users Offset */
                offset?: number;
                /** @description Max number of Users */
                limit?: number;
                /** @description ID of the Organization */
                organization_id?: string | null;
                email?: string;
                is_active?: boolean;
                is_verified?: boolean;
                first_name?: string;
                last_name?: string;
                generic_email_name_search?: string;
                phone_number?: string;
                organization_unit_id?: string;
                organization_group_id?: string;
                /** @description Attribute used to sort the Results: ['first_name', 'created_date'] */
                sort?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_UserRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_read_users__me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReadWithAttributes"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_delete_users__me_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_edit_users__me_patch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description User Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReadWithAttributes"];
                };
            };
            /** @description Attribute Type non existent or is an Organization Attribute */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_access_read_users__me_access_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Access Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserAccess"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_read_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReadWithAttributes"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_delete_users__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Self Delete Not Allowed or User is associated with an Organization */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_edit_users__user_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserUpdate"];
            };
        };
        responses: {
            /** @description User Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserReadWithAttributes"];
                };
            };
            /** @description Attribute Type non existent or is an Organization Attribute */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_password_update_users__me_password_put: {
        parameters: {
            query?: {
                /** @description Override Pwned Password */
                override_pwned?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPasswordUpdate"];
            };
        };
        responses: {
            /** @description User Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Invalid Password */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Pwned Password */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_password_create_users__me_password_post: {
        parameters: {
            query?: {
                /** @description Override Pwned Password */
                override_pwned?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserPasswordCreate"];
            };
        };
        responses: {
            /** @description User Updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Invalid Password or User has Password */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Pwned Password */
            406: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    reset_user_password_users__user_id__password_reset_post: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Password Reset Triggered */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_enable_users__user_id__enable_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Enabled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description User is already enabled */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_disable_users__user_id__disable_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Disabled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description User is already disabled */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_magic_link_enabled_update_users__me_magic_link_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserMagicLinkUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMagicLinkRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Magic Link Enabled set to same status */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_email_otp_read_users__me_email_otp_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns User Email OTP status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEmailOTPStatusRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_email_otp_update_enabled_users__me_email_otp_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserEmailOTPStatusUpdate"];
            };
        };
        responses: {
            /** @description Success - Returns User Email OTP enabled status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEmailOTPStatusRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Setting the same Email OTP status as the current status */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_mfa_required_status_update_users__me_mfa_required_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserMFARequiredStatusUpdate"];
            };
        };
        responses: {
            /** @description Success - Returns User MFA Required status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMFARequiredStatusRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Setting the same MFA Required status as the current status */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description All MFA Methods Disabled */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_mfa_required_status_update_users__user_id__mfa_required_put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserMFARequiredStatusUpdate"];
            };
        };
        responses: {
            /** @description Success - Returns User MFA Required status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserMFARequiredStatusRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Setting the same MFA Required status as the current status */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
            /** @description All MFA Methods Disabled */
            428: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_hubspot_visitor_token_users__me_hubspot_visitor_token_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - new Visitor Token returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HubspotVisitorIdentificationToken"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_email_update_users__me_email_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserEmailChange"];
            };
        };
        responses: {
            /** @description User Email Updated */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRead"];
                };
            };
            /** @description Email is already verified */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Password Incorrect */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Email Verification In Progress */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_emails_read_users__me_emails_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEmailsRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    delete_user_email_users__me_emails__email_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the User Email */
                email_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Email is Verified */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - Email belongs to another User */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Email not Found with ID */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_mfa_read_users__me_mfa_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MFARead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_mfa_update_users__me_mfa_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MFAUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MFARead"];
                };
            };
            /** @description Method is not configured for the User */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_mfa_delete_users__me_mfa_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User has not MFA Method */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_sessions_read_users__me_sessions_get: {
        parameters: {
            query?: {
                /** @description User Sessions Offset */
                offset?: number;
                /** @description Max number of User Sessions */
                limit?: number;
                /** @description Attribute used to sort the Results: ['create_date', 'valid_till', 'ip_address', 'user_agent'] */
                sort?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sessions Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_UserSessionRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_sessions_read_users__user_id__sessions_get: {
        parameters: {
            query?: {
                /** @description User Sessions Offset */
                offset?: number;
                /** @description Max number of User Sessions */
                limit?: number;
                /** @description Attribute used to sort the Results: ['create_date', 'valid_till', 'ip_address', 'user_agent'] */
                sort?: string | null;
            };
            header?: never;
            path: {
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sessions Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginationSchema_UserSessionRead_"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_session_delete_users__me_sessions__session_token__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Session Token */
                session_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Session Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Session */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_session_delete_users__user_id__sessions__session_token__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the User */
                user_id: string;
                /** @description Session Token */
                session_token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Session Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing User or Session */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_social_accounts_read_users__me_social_accounts_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Social Accounts Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSocialAccountRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_social_accounts_read_users__user_id__social_accounts_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Social Accounts Retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserSocialAccountRead"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing User */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_social_account_delete_users__me_social_accounts__social_account__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Social Account Type */
                social_account: components["schemas"]["SocialAccountType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Social Accounts Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing Social Account */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_social_account_delete_users__user_id__social_accounts__social_account__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the User */
                user_id: string;
                /** @description Social Account Type */
                social_account: components["schemas"]["SocialAccountType"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Social Accounts Deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing User or Social Account */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_totp_read_users__me_totp_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns User confirmed status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TOTPRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing TOTP - User has no TOTP configured */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_update_totp_users__me_totp_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TOTPUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TOTPVerificationRead"];
                };
            };
            /** @description Invalid Verification Code */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing TOTP */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Duplicate - User has TOTP record with Confirmed as True */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_totp_create_users__me_totp_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Returns User TOTP record */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TOTPConfirmationRead"];
                };
            };
            /** @description Created - Creates and returns User TOTP record */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Duplicate - User has TOTP record with Confirmed as True */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_totp_delete_users__me_totp_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing TOTP */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_totp_delete_users__user_id__totp_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the User */
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing User or TOTP */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_webauthn_read_users__me_webauthn_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebAuthnRead"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing WebAuthn - User has no WebAuthn configured */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_webauthn_update_users__me_webauthn_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WebAuthnUpdate"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebAuthnStatusRead"];
                };
            };
            /** @description Invalid Credential */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User has no WebAuthn */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Duplicate - User has Confirmed WebAuthn */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    user_me_webauthn_create_users__me_webauthn_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success - Update */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WebAuthnOptionsRead"];
                };
            };
            /** @description Success - Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Duplicate - User has Confirmed WebAuthn */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    user_me_webauthn_delete_users__me_webauthn_delete: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing WebAuthn - User has no WebAuthn configured */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
